Obiettivo: aggiungere conferma email e recupero password.

📂 File/Cartelle:
- `src/api/auth/verify-email.js`
- `src/api/auth/reset-password.js`
- Frontend: `VerifyEmail.jsx`, `ForgotPassword.jsx`, `ResetPassword.jsx`

📋 Azioni:
1. Su registrazione, invia email con link `https://in-out.com/auth/verify-email?token=...`.
2. API `GET /api/auth/verify-email?token=` decodifica JWT e attiva user.
3. “Forgot Password”: invia link JWT a `/auth/reset-password`.
4. “Reset Password” page chiede nuova password, chiama `POST /api/auth/reset-password`.
5. Test: registra utente, verifica email, reset password con link.
Prompt 12 – Audit Trail
plaintext
Copia
🔧 Obiettivo: registrare azioni critiche in tabella `audit_logs`.

📂 File/Cartelle:
- DB migrazione: `migrations/1620005000_create_audit_logs.sql`
- Middleware: `src/middleware/audit.js`

📋 Azioni:
1. **DB**  
   ```sql
   CREATE TABLE audit_logs (
     id SERIAL PRIMARY KEY,
     user_id UUID,
     action TEXT,
     details JSONB,
     created_at TIMESTAMP DEFAULT NOW()
   );
Middleware (audit.js)

js
Copia
export function audit(action, details) {
  return async (req, res, next) => {
    await db.insert('audit_logs', { user_id: req.auth.uid(), action, details });
    next();
  };
}
Applica a route sensibili (/api/admin/remove-announcement, /api/auth/login, etc.).

Test: esegui operazione e verifica record in audit_logs.

yaml
Copia

---

### Prompt 13 – FAQ / Knowledge Base  
```plaintext
🔧 Obiettivo: creare sezione FAQ dinamica con contenuti JSON.

📂 File/Cartelle:
- `data/faqs.json`
- `pages/faq.js`
- `src/components/FAQList.jsx`

📋 Azioni:
1. Crea `data/faqs.json`:
   ```json
   [
     { "q": "Come cerco un annuncio?", "a":"Usa la barra di ricerca con città e filtri." },
     ...
   ]
In pages/faq.js, importa JSON e passa a FAQList.

FAQList.jsx mostra accordions per ogni Q/A.

Test: naviga /faq, clicca su domande, verifica apertura.

yaml
Copia

---

### Prompt 14 – Live Chat / Ticket System  
```plaintext
🔧 Obiettivo: integrare Crisp o Zendesk per supporto .

📂 File/Cartelle:
- `_document.js` (script snippet)

📋 Azioni:
1. Crea account su Crisp (https://crisp.chat).
2. Copia snippet JS fornit o in `<Head>` di `pages/_document.js`:
   ```html
   <script type="text/javascript">window.$crisp=[]; /* ... */</script>
Test: apri sito, verifica widget chat in basso.

yaml
Copia

---

### Prompt 15 – Onboarding Video / Guide Interattive  
```plaintext
🔧 Obiettivo: aggiungere video tutorial o guide pop‑up.

📂 File/Cartelle:
- `public/tutorial.mp4`
- `src/components/TutorialModal.jsx`

📋 Azioni:
1. `TutorialModal.jsx`: modal con `<video src="/tutorial.mp4" controls />`.
2. Trigger da navbar “Guida” o primo login.
3. Test: clic “Guida”, modal si apre con video.

Prompt 16 – Error Tracking (Sentry)
plaintext
Copia
🔧 Obiettivo: integrare Sentry per errori client e server.

📂 File/Cartelle:
- `src/utils/sentry.js`
- `src/index.jsx`, `src/server.js`

📋 Azioni:
1. Installa: `npm install @sentry/react @sentry/node @sentry/tracing`.
2. Client in `index.jsx`, Server in `server.js` (vedi prompt precedente).
3. Test: lancia `throw new Error('Test Sentry')` e verifica evento in Sentry dashboard.

Prompt 17 – Performance Monitoring (Datadog/New Relic)
plaintext
Copia
🔧 Obiettivo: monitorare TTFB, LCP, FID con Datadog RUM o New Relic Browser.

📂 File/Cartelle:
- Snippet JS in `_document.js` o `_app.js`

📋 Azioni:
1. Crea account RUM Datadog, copia snippet:
   ```html
   <script>
     // Datadog RUM init
   </script>
Incollalo in <Head> di _document.js.

Test: visita pagine e controlla metriche in Datadog.

yaml
Copia

---

### Prompt 18 – KPI Dashboard  
```plaintext
🔧 Obiettivo: creare dashboard custom con Recharts in area Admin.

📂 File/Cartelle:
- `src/components/AdminKPIs.jsx`
- API: `src/api/admin/kpis.js`

📋 Azioni:
1. API `GET /api/admin/kpis` ritorna JSON con:
   `{ signupsLast30Days, announcementsLast30Days, avgSessionTime }`
2. `AdminKPIs.jsx` mostra:
   - BarChart `signupsLast30Days`
   - LineChart `announcementsLast30Days`
   - Statistic card `avgSessionTime`
3. Test: popola DB con dati demo, verifica grafici.

